// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bNJjNc2NbC4jfBdycy75o8
// Component: yrt3dRfNFL8K
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9tG1OyZAVIis/component
import Divider from "../../Divider"; // plasmic-import: oCAlBrknrkLn/component
import TextInput from "../../TextInput"; // plasmic-import: W8d-SKhm83xS/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: bNJjNc2NbC4jfBdycy75o8/projectcss
import * as sty from "./PlasmicSignUpPrompt.module.css"; // plasmic-import: yrt3dRfNFL8K/css
import GoogleIcon from "./icons/PlasmicIcon__Google"; // plasmic-import: z9cGvuOYJMO1/icon
import WandIcon from "./icons/PlasmicIcon__Wand"; // plasmic-import: YXiwJs_7G3Nj/icon

export const PlasmicSignUpPrompt__VariantProps = new Array();

export const PlasmicSignUpPrompt__ArgProps = new Array();

function PlasmicSignUpPrompt__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__aOx2P
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__xuSw5
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___06Eiu
            )}
          >
            {"Sign up with"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__usfqB
            )}
          >
            <Button
              className={classNames("__wab_instance", sty.button__iNnM)}
              outline={"outline"}
              showStartIcon={"showStartIcon"}
            >
              {"Apple"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__tQurv)}
              outline={"outline"}
              showStartIcon={"showStartIcon"}
              startIcon={
                <GoogleIcon
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    sty.svg___9HHra
                  )}
                  role={"img"}
                />
              }
            >
              {"Google"}
            </Button>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox___8G2AC
            )}
          >
            <Divider
              className={classNames("__wab_instance", sty.divider___3W49Z)}
            />

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__oE3A
              )}
            >
              {"Or"}
            </div>

            <Divider
              className={classNames("__wab_instance", sty.divider__fBzdT)}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__umM4T
            )}
          >
            <TextInput
              className={classNames("__wab_instance", sty.textInput__rX6Ld)}
              placeholder={"Full Name"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__yh6U2)}
              placeholder={"Email"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__h0E5J)}
              placeholder={"Password"}
            />
          </p.Stack>

          <Button
            className={classNames("__wab_instance", sty.button__rnm05)}
            color={"indigo"}
            endIcon={
              <WandIcon
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.svg__cmzE
                )}
                role={"img"}
              />
            }
          >
            {"Start your account"}
          </Button>
        </p.Stack>

        <Divider className={classNames("__wab_instance", sty.divider__hcI8Q)} />

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__p0M1W
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__se0Xr
            )}
          >
            {
              "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
            }
          </div>
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
      internalVariantPropNames: PlasmicSignUpPrompt__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt";
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps
  }
);

export default PlasmicSignUpPrompt;
/* prettier-ignore-end */
